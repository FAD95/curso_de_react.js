{"version":3,"sources":["images/badge-header.svg","images/logo.svg","serviceWorker.js","components/Navbar.js","components/Badge.js","components/BadgeForm.js","components/BadgeLists.js","pages/BadgeNew.js","pages/Badges.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","href","src","logo","alt","React","Component","Badge","confLogo","this","props","firstName","lastName","jobTitle","twitter","BadgeForm","handleClick","e","console","log","handleSubmit","preventDefault","state","onSubmit","action","htmlFor","onChange","placeholder","id","name","type","value","formValues","required","email","onClick","BadgesLists","listValues","map","badge","key","avatarUrl","Badges","data","BadgeHero","container","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff8658f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/badge-header.973f5842.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.0026b862.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport logo from \"../images/logo.svg\";\nimport \"./styles/css/Navbars.css\";\n\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <nav className=\"Navbar\">\n        <div className=\"container-fluid\">\n          <a className='Navbar__brand' href=\"/\">\n            <img className='Navbar__brand-logo' src={logo} alt=\"Logo\" />\n            <span className=\"font-weight-light\">Platzi</span>\n            <span className=\"font-weight-bold\">Conf</span>\n          </a>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport confLogo from '../images/badge-header.svg';\nimport './styles/css/Badges.css';\n\nclass Badge extends React.Component{\n    render(){\n        return(\n            <div className='Badge'>\n                <header className='Badge__header'>\n                    <img src={confLogo} alt=\"Logo de la conferencia\"/>\n                </header>\n                <main>\n                    <section className='Badge__section-name'>\n                        <img  className='Badge__section-name--avatar' src=\"https://es.gravatar.com/avatar?d=identicon\" alt=\"Avatar\"/>\n                        <h1>{this.props.firstName}<br/>{this.props.lastName}</h1>\n                    </section>\n                    <section className='Badge__section-info'>\n                        <h3>{this.props.jobTitle}</h3>\n                        <span>@{this.props.twitter}</span>\n                    </section>\n                </main>\n                <footer className='Badge__footer'>\n                    #platziConf\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default Badge;\n\n","import React from \"react\";\n\nclass BadgeForm extends React.Component {\n  // state={\n  //   jobTitle: \"Front-end Developer\"\n  // };\n  // handleChange = e => {\n  //   this.setState({\n  //     [e.target.name]: e.target.value\n  //   });\n  // };\n  handleClick = e => {\n    console.log(\"Button clicked\");\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"Submited\");\n    console.log(this.state);\n  };\n  render() {\n    return (\n      <div>\n        <h1>New Attendant</h1>\n        <form onSubmit={this.handleSubmit} action=\"\">\n          <div className=\"form-group\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n              onChange={this.props.onChange}\n              placeholder=\"Enter your name here\"\n              id=\"firstName\"\n              className=\"form-control\"\n              name=\"firstName\"\n              type=\"text\"\n              value={this.props.formValues.firstName}\n            />\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n              onChange={this.props.onChange}\n              placeholder=\"Enter your last name here\"\n              id=\"lastName\"\n              className=\"form-control\"\n              name=\"lastName\"\n              type=\"text\"\n              value={this.props.formValues.lastName}\n            />\n            <label htmlFor=\"email\">Email</label>\n            <input\n              onChange={this.props.onChange}\n              placeholder=\"Enter your email here\"\n              id=\"email\"\n              className=\"form-control\"\n              name=\"email\"\n              type=\"email\"\n              required\n              value={this.props.formValues.email}\n            />\n            <label htmlFor=\"jobTitle\">Job Title</label>\n            <input\n              onChange={this.props.onChange}\n              placeholder=\"Enter your job title here\"\n              id=\"jobTitle\"\n              className=\"form-control\"\n              name=\"jobTitle\"\n              type=\"text\"\n              value={this.props.formValues.jobTitle}\n            />\n            <label htmlFor=\"twitter\">Twitter</label>\n            <input\n              onChange={this.props.onChange}\n              placeholder=\"Enter your twitter here\"\n              id=\"twitter\"\n              className=\"form-control\"\n              name=\"twitter\"\n              type=\"text\"\n              value={this.props.formValues.twitter}\n            />\n            <br />\n            <button\n              type=\"submit\"\n              onClick={this.handleClick}\n              className=\"btn btn-primary\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default BadgeForm;\n","import React from \"react\";\nimport \"./styles/css/BadgeLists.css\";\n\nclass BadgesLists extends React.Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"Badges-list\">\n        <div className=\"Badges__container\">\n          <ul className=\"list-unstyled\">\n            {this.props.listValues.map(badge => {\n              return (\n                <li key={badge.id}>\n                  <div className=\"List-element\">\n                    <img className=\"List-element__avatar\" src={badge.avatarUrl} alt=\"\" />\n                    <section className=\"List-element__info\">\n                      <h3>\n                        {badge.firstName} {badge.lastName}\n                      </h3>\n                      <p>{badge.jobTitle}</p>\n                      <p className=\"lead List-element__info__twitter\">\n                        <span>\n                          <img\n                            className=\"List-element__info__twitter--logo\"\n                            src=\"https://images.vexels.com/media/users/3/141372/isolated/lists/bf214a095a99c9aad3922f5a3a4ce2d4-boton-redondo-de-metal-de-twitter.png\"\n                            alt=\"\"\n                          />\n                          @{badge.twitter}\n                        </span>\n                      </p>\n                    </section>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BadgesLists;\n","import React from \"react\";\nimport header from \"../images/badge-header.svg\";\nimport \"./styles/css/BadgesNew.css\";\nimport Navbar from \"../components/Navbar\";\nimport Badge from \"../components/Badge\";\nimport BadgeForm from \"../components/BadgeForm\";\n\nclass BadgeNew extends React.Component {\n  state = {\n    form: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      jobTitle: \"Front-end Developer\",\n      twitter: \"\"\n    }\n  };\n\n  handleChange = e => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <main>\n          <section className=\"BadgeNew__hero\">\n            <img className=\"img-fluid\" src={header} alt=\"logo header\" />\n          </section>\n          <section className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <Badge\n                  firstName={this.state.form.firstName}\n                  lastName={this.state.form.lastName}\n                  jobTitle={this.state.form.jobTitle}\n                  twitter={this.state.form.twitter}\n                />\n              </div>\n              <div className=\"col-6\">\n                <BadgeForm onChange={this.handleChange} formValues={this.state.form}/>\n              </div>\n            </div>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default BadgeNew;\n","import React from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport BadgeLists from \"../components/BadgeLists\"\nimport \"./styles/css/Badges.css\";\nimport BadgeHero from \"../images/badge-header.svg\";\nclass Badges extends React.Component {\n    state={\n        data:[\n            {\n              id: '2de30c42-9deb-40fc-a41f-05e62b5939a7',\n              firstName: 'Freda',\n              lastName: 'Grady',\n              email: 'Leann_Berge@gmail.com',\n              jobTitle: 'LegacyBrandDirector',\n              twitter: 'FredaGrady22221-7573',\n              avatarUrl:\n                'https://www.gravatar.com/avatar/f63a9c45aca0e7e7de0782a6b1dff40b?d=identicon',\n            },\n            {\n              id: 'd00d3614-101a-44ca-b6c2-0be075aeed3d',\n              firstName: 'Major',\n              lastName: 'Rodriguez',\n              email: 'Ilene66@hotmail.com',\n              jobTitle: 'HumanResearchArchitect',\n              twitter: 'MajorRodriguez61545',\n              avatarUrl:\n                'https://www.gravatar.com/avatar/d57a8be8cb9219609905da25d5f3e50a?d=identicon',\n            },\n            {\n              id: '63c03386-33a2-4512-9ac1-354ad7bec5e9',\n              firstName: 'Daphney',\n              lastName: 'Torphy',\n              email: 'Ron61@hotmail.com',\n              jobTitle: 'NationalMarketsOfficer',\n              twitter: 'DaphneyTorphy96105',\n              avatarUrl:\n                'https://www.gravatar.com/avatar/e74e87d40e55b9ff9791c78892e55cb7?d=identicon',\n            },\n          ],\n    }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <main>\n          <section className=\"Badges\">\n            <div className=\"Badges__hero\">\n              <div className=\"Badges__container r\">\n                <img className=\"Badges_conf-logo\" src={BadgeHero} alt=\"\" />\n              </div>\n            </div>\n          </section>\n          <section className=\"Badges__container\">\n            <div className=\"Badges__buttons\">\n              <a href=\"/badges/new\" className=\"Badges__buttons btn btn-primary\">\n                New Badge\n              </a>\n            </div>\n            <BadgeLists listValues={this.state.data}/>\n\n\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Badges;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./styles.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport BadgeNew from \"./pages/BadgeNew\";\nimport Badges from \"./pages/Badges\";\n\nconst container = document.getElementById(\"root\");\n\nReactDOM.render(<Badges />, container);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}